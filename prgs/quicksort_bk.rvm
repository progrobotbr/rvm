class quicksort beg

--
-- quicksort com strings
--

int idx
int gtam 
--object(string) vv[100]
object(string) vv[]
  
  
def put(char p1[]) beg
  object(string) s
  s = new string
  s.string(p1)
  vv[idx] = s 
  idx = idx + 1
enddef

def char[] as(int i, char bf[]) beg
 
   object(stringbuilder) sb
   sb = new stringbuilder
   sb.appendint(i)
   sb.appendca(bf)
   return(sb.mbuf)
 
enddef

def int partition(int pbegin, int pend) beg
    int i
	int j
	int zz
	int v1
	int v2
	object(string) swapTemp
	object(string) pivot
	object(string) sa
	object(string) sb
	object(print) pp
	
	pivot = vv[pend]
    i = pbegin-1
    
	j = pbegin
    while(j < pend) beg
	    sa = vv[j]
	    zz = sa.compare(pivot)
		
        if(zz == sa.menor || zz == sa.igual) beg
		   
            i = i + 1
			sa = vv[i]
            swapTemp = sa
			sa = vv[j]
            vv[i] = sa
            vv[j] = swapTemp
		endif
		j = j + 1
    endwhile

    v1 = i+1
    swapTemp = vv[i+1]
	sa =  vv[pend]
    vv[i+1] = sa
    vv[pend] = swapTemp

    return(i + 1)
	
enddef

def __quickSort(int pbegin, int pend) beg
    if(pbegin < pend) beg
        int partitionIndex
		int v1
		int v2
		
		partitionIndex = partition(pbegin, pend)

        v1 = partitionIndex-1
		v2 = partitionIndex+1
        __quickSort(pbegin, v1)
        __quickSort(v2, pend)
    endif
  
enddef

def main() beg
  int i
  int z
  int zz
  int tt
  --object(string) vv[5]
  object(string) s
  object(string) sa
  object(string) sb
  object(print) p 
  object(lang_util) lu
  
  idx = 0
  
  gtam = 100
  
  p = new print
  lu = new lang_util
  
  put("Eduardo")
  put("Fernanda")
  put("Jubscreuda")
  put("Daniela")
  put("Giovanna")
  put("Renato")
  put("Miguel")
  put("Azarel")
  put("Coringa")
  put("Luciana")
  put("Zuzu")
  put("Zuza")
  put("Kafka")
  
  int zzz
  zzz=0
  
  --
  -- Preenchde 
  --
  --gtam = lu.len(vv) - 12
  gtam = gtam - 13
  while(zzz<gtam) beg
    put(as(zzz,"_Eduardo"))
    zzz = zzz + 1
  endwhile
 
  --
  -- Mostra dados
  --
  i=0
  while(i < idx) beg
    sa = vv[i]
    p.println(sa)
    i = i + 1
  endwhile
 
  p.printcln("-- Inicio ordenacao --")	
  
  --gtam = gtam + 12
  --p.printiln(gtam)	
  gtam = lu.len(vv)
  --p.printiln(gtam)	
  
  tt = gtam-1
  
  __quickSort(0, tt)
  
  p.printcln("-- Fim ordenacao --")	
  
  --p.printiln(idx)	
  i=0
  while(i < idx) beg
    sa = vv[i]
	p.printi(i)
	p.printc("-")
    p.println(sa)
    i = i + 1
  endwhile

enddef

def printarr() beg
  int i
  int t
  object(print) p
  object(lang_util) lu
  i = 0
  p = new print
  lu = new lang_util
  t = lu.len(vv)
  while(i<t) beg
    p.println(vv[i])
	i = i + 1
  endwhile

enddef

def quickSort(object(string) pvm[], int pbegin, int pend) beg

  vv = pvm
  __quickSort(pbegin, pend)
  
  --printarr()
  --return(vv)
  
enddef


endclass

